# **DocumentaciÃ³n del Proyecto: Asistente MÃ©dico**

## **1. IntroducciÃ³n**
### **Problema que resuelve el sistema**
Actualmente, la gestiÃ³n de turnos, pacientes, consultas y cirugÃ­as se maneja de forma manual con Excel, Word y PDF. Esto genera ineficiencias, errores en los registros y dificultades en el seguimiento de pacientes. 

El sistema automatiza estos procesos, permitiendo:
- Registro estructurado de pacientes.
- Agendamiento y control de turnos (consultas y operaciones).
- GeneraciÃ³n automÃ¡tica de informes mÃ©dicos y protocolos quirÃºrgicos.
- IntegraciÃ³n con obras sociales y centros mÃ©dicos.
- Control de acceso por roles (pacientes, doctores, administrativos).

---
## **2. Estructura de Archivos**
### **RaÃ­z del Proyecto**
```
asistente/
â”œâ”€â”€ medical_assistant/ 
â”‚   â”œâ”€â”€ apps/ 
â”‚   â”‚   â”œâ”€â”€ centros_medicos/ 
â”‚   â”‚   â”œâ”€â”€ consultas/ 
â”‚   â”‚   â”œâ”€â”€ core/ 
â”‚   â”‚   â”œâ”€â”€ importacion_excel/ 
â”‚   â”‚   â”œâ”€â”€ informes/ 
â”‚   â”‚   â”œâ”€â”€ obras_sociales/ 
â”‚   â”‚   â”œâ”€â”€ operaciones/ 
â”‚   â”‚   â”œâ”€â”€ pacientes/ 
â”‚   â”‚   â”œâ”€â”€ turnos/
â”‚   â”‚   â””â”€â”€ usuarios/ 
â”‚   â”œâ”€â”€ docs/
â”‚   â”‚   â”œâ”€â”€ documentacion_proyecto.md
â”‚   â”œâ”€â”€ media/
â”‚   â”œâ”€â”€ medical_assistant/
â”‚   â”‚   â”œâ”€â”€ settings.py
â”‚   â”‚   â”œâ”€â”€ urls.py
â”‚   â”‚   â”œâ”€â”€ asgi.py
â”‚   â”‚   â”œâ”€â”€ wsgi.py
â”‚   â”œâ”€â”€ requirements/
â”‚   â”œâ”€â”€ static/
â”‚   â”‚   â”œâ”€â”€ css/ 
â”‚   â”‚   â”œâ”€â”€ js/ 
â”‚   â”‚   â””â”€â”€ img/ 
â”‚   â”œâ”€â”€ templates/
â”‚   â”œâ”€â”€ manage.py
venv/
```

### **DescripciÃ³n de las Apps**
| **App**              | **Funcionalidad** |
|----------------------|------------------|
| `pacientes`         | GestiÃ³n de pacientes (datos personales, obra social, historial). |
| `turnos`            | Manejo de agendamiento de turnos para consultas y operaciones. |
| `consultas`         | Registro de consultas mÃ©dicas, diagnÃ³sticos y tratamientos. |
| `operaciones`       | AdministraciÃ³n de cirugÃ­as y protocolos quirÃºrgicos. |
| `informes`          | GeneraciÃ³n de informes en PDF sobre consultas y operaciones. |
| `usuarios`          | Control de acceso y gestiÃ³n de usuarios (pacientes, mÃ©dicos, administrativos). Incluye gestiÃ³n de relaciones administrativo-mÃ©dico y administrativo-centro mÃ©dico. |
| `obras_sociales`    | Manejo de obras sociales y planes de cobertura. |
| `centros_medicos`   | AdministraciÃ³n de establecimientos mÃ©dicos, consultorios y relaciones mÃ©dico-centro mÃ©dico. |
| `importacion_excel` | Carga masiva de datos desde archivos Excel. |
| `core`              | Configuraciones generales y utilidades compartidas. |
| `insumos_medicos`   | GestiÃ³n de materiales y medicamentos quirÃºrgicos. |

### **Modelos Principales**
#### **Usuarios y GestiÃ³n**
- `Usuario`: Modelo base extendido de AbstractUser con roles especÃ­ficos
- `Medico`: InformaciÃ³n especÃ­fica del mÃ©dico (tipo, especialidad, matrÃ­cula)
- `Administrativo`: GestiÃ³n de personal administrativo
- `GestionAdministrativa`: Manejo de relaciones entre administrativos y mÃ©dicos/centros mÃ©dicos

#### **Centros MÃ©dicos**
- `CentroMedico`: InformaciÃ³n bÃ¡sica del centro mÃ©dico
- `Consultorio`: GestiÃ³n de consultorios por centro mÃ©dico
- `HorarioAtencion`: Horarios disponibles por consultorio
- `MedicoCentroMedico`: RelaciÃ³n entre mÃ©dicos y centros mÃ©dicos con horarios

---
## **3. Flujo de Trabajo**
### **GestiÃ³n Administrativa**
1. **ConfiguraciÃ³n Inicial**
   - CreaciÃ³n de usuarios (mÃ©dicos, administrativos)
   - AsignaciÃ³n de roles y permisos
   - Establecimiento de relaciones administrativo-mÃ©dico o administrativo-centro mÃ©dico

2. **GestiÃ³n de Turnos**
   - **Para administrativos de centro mÃ©dico:**
     - Acceso a agenda de todos los mÃ©dicos del centro
     - GestiÃ³n de turnos en cualquier consultorio del centro
     - Control de horarios y disponibilidad
   
   - **Para administrativos de mÃ©dico:**
     - Acceso a agenda del mÃ©dico en todos sus centros
     - GestiÃ³n de turnos en los centros donde el mÃ©dico atiende
     - Control de horarios especÃ­ficos del mÃ©dico

3. **El paciente solicita turno**
   - Si no estÃ¡ en la base de datos, se crea un nuevo registro con datos bÃ¡sicos.
   - AÃºn no tiene turno, doctor, centro mÃ©dico ni detalles adicionales.
4. **El administrativo asigna el turno.**
   - Se agregan datos clave como el mÃ©dico, centro mÃ©dico y autorizaciÃ³n de obra social.
   - Se define si el turno es para consulta o cirugÃ­a.
5. **El paciente asiste a la consulta.**
   - El mÃ©dico registra la atenciÃ³n y determina si requiere cirugÃ­a.
   - Se asigna una operaciÃ³n si es necesario.
6. **Si hay cirugÃ­a, se prepara el procedimiento.**
   - Se genera el protocolo quirÃºrgico y se asigna instrumentador y anestesista.
7. **El mÃ©dico genera el informe postoperatorio.**
   - Se genera automÃ¡ticamente basado en el protocolo y datos preestablecidos
   - El mÃ©dico puede realizar ajustes y modificaciones post-generaciÃ³n
   - Sistema de control de versiones para mantener historial de cambios
   - Los cambios quedan registrados con fecha, hora y usuario que los realizÃ³
   - Se mantiene una copia del informe original y la versiÃ³n modificada

### **GestiÃ³n de Informes y Protocolos**
1. **GeneraciÃ³n del Informe**
   - CreaciÃ³n inicial basada en plantilla
   - IncorporaciÃ³n de datos del procedimiento
   - GeneraciÃ³n automÃ¡tica del PDF

2. **RevisiÃ³n y EdiciÃ³n**
   - El mÃ©dico revisa el informe generado
   - Si requiere cambios:
     - Accede a la interfaz de ediciÃ³n
     - Realiza modificaciones necesarias
     - Especifica el motivo del cambio
     - Sistema crea nueva versiÃ³n automÃ¡ticamente

3. **Control de Versiones**
   - Cada modificaciÃ³n genera nueva versiÃ³n
   - Se mantiene historial completo
   - Acceso a todas las versiones anteriores
   - Capacidad de comparar versiones
   
4. **VisualizaciÃ³n de Cambios**
   - Interfaz visual para comparar versiones
   - Tres niveles de comparaciÃ³n:
     - Contenido: Diferencias lÃ­nea por lÃ­nea
     - Variables: Cambios en valores
     - Metadata: InformaciÃ³n de modificaciÃ³n

5. **ValidaciÃ³n y Firma**
   - VerificaciÃ³n de cambios
   - AprobaciÃ³n mÃ©dica
   - Firma digital (pendiente)
   - GeneraciÃ³n de PDF actualizado

### **Validaciones y Controles**
- VerificaciÃ³n automÃ¡tica de disponibilidad segÃºn horarios establecidos
- Control de superposiciÃ³n de turnos
- ValidaciÃ³n de relaciones mÃ©dico-centro mÃ©dico activas
- Control de permisos segÃºn tipo de gestiÃ³n administrativa

---
## **4. Estado del Proyecto**
âœ… **Implementado:**
- Modelos base creados y migrados
- Sistema de roles y permisos
- GestiÃ³n de relaciones administrativo-mÃ©dico y administrativo-centro mÃ©dico
- Control de horarios por mÃ©dico y centro mÃ©dico
- Validaciones de disponibilidad y superposiciÃ³n
- Admin mejorado con filtros y bÃºsquedas especÃ­ficas
- ImportaciÃ³n desde Excel (funcional)
- Sistema de gestiÃ³n de protocolos quirÃºrgicos
- GeneraciÃ³n automÃ¡tica de documentos PDF
- Sistema de ediciÃ³n post-generaciÃ³n de informes
- Control de versiones en modificaciones de informes
- Interfaz visual para comparaciÃ³n de versiones
- Sistema de notificaciones bÃ¡sico implementado

ğŸ“Œ **PrÃ³ximos pasos:**
- Implementar sistema de notificaciones avanzado (email/SMS)
- Desarrollar dashboard para estadÃ­sticas
- Implementar sistema de reportes personalizados
- Optimizar el rendimiento de consultas complejas
- Implementar cache para mejorar tiempos de respuesta
- Agregar sistema de firmas digitales para informes modificados
- Desarrollar vista de comparaciÃ³n entre versiones de informes

---
## **5. TecnologÃ­as y Herramientas Utilizadas**
### **Backend**
- **Framework:** Django (Python)
- **Base de Datos:** PostgreSQL
- **AutenticaciÃ³n:** Django Auth con roles personalizados
- **GeneraciÃ³n de PDF:** ReportLab
- **Cache:** Redis
- **Tareas asÃ­ncronas:** Celery
- **API REST:** Django Rest Framework
- **Control de Versiones:** difflib para comparaciÃ³n de textos

### **Frontend**
- **Templates:** Django Templates
- **CSS Framework:** Bootstrap 5
- **JavaScript:** 
  - Vue.js para componentes dinÃ¡micos
  - Axios para llamadas API
  - FullCalendar para gestiÃ³n de calendario
- **DiseÃ±o Responsivo:** Tailwind CSS
- **ComparaciÃ³n Visual:** Sistema personalizado de diff

---
## **6. Funcionalidades Detalladas**
### **Sistema de Versionado de Informes**
1. **Control de Versiones**
   - Registro automÃ¡tico de cada modificaciÃ³n
   - Almacenamiento de contenido anterior
   - Tracking de variables modificadas
   - Historial completo de cambios

2. **Interfaz de EdiciÃ³n**
   - Editor de contenido intuitivo
   - Campo obligatorio para motivo de modificaciÃ³n
   - PrevisualizaciÃ³n de cambios
   - ValidaciÃ³n de permisos

3. **VisualizaciÃ³n de Diferencias**
   - ComparaciÃ³n visual lÃ­nea por lÃ­nea
   - IdentificaciÃ³n de cambios con colores
   - Tabla comparativa de variables
   - Metadata de modificaciones

4. **CaracterÃ­sticas de Seguridad**
   - Control de acceso basado en roles
   - Registro de usuario modificador
   - Timestamp de modificaciones
   - ValidaciÃ³n de permisos por mÃ©dico

5. **GestiÃ³n de PDF**
   - RegeneraciÃ³n automÃ¡tica post-modificaciÃ³n
   - Almacenamiento de versiones anteriores
   - Acceso al historial de PDFs
   - ComparaciÃ³n entre versiones

---
## **7. Pasos a Seguir**
1. **Finalizar integraciÃ³n de importaciÃ³n de datos desde Excel**
2. **Optimizar la interfaz de administraciÃ³n y formularios**
3. **Agregar permisos detallados segÃºn roles (paciente, mÃ©dico, administrativo)**
4. **Implementar reportes y grÃ¡ficos de uso**
5. **Desplegar el sistema en un servidor en producciÃ³n**
6. **Futuro:** Permitir que los pacientes completen su informaciÃ³n online

---
## **8. ProyecciÃ³n del Programa**
âœ” **ExpansiÃ³n para soportar mÃºltiples clÃ­nicas y centros mÃ©dicos**
âœ” **Sistema de gestiÃ³n de horarios y disponibilidad**
âœ” **Control granular de permisos y accesos**
âœ” **ImplementaciÃ³n de un mÃ³dulo de facturaciÃ³n**
âœ” **IntegraciÃ³n con sistemas de historias clÃ­nicas digitales**
âœ” **Notificaciones automÃ¡ticas de turnos a pacientes y mÃ©dicos**

---
## **9. Contacto y Mantenimiento**
- **Responsable del Proyecto:** [Nombre o equipo]
- **Repositorio de cÃ³digo:** [Enlace a GitHub o GitLab]
- **DocumentaciÃ³n interna:** [Enlace a wiki o Notion]

Esta documentaciÃ³n estÃ¡ diseÃ±ada para ser utilizada como prompt en cualquier IA para dar contexto sobre el estado y la direcciÃ³n del proyecto. ğŸš€

### **MÃ³dulo de ImportaciÃ³n Excel**
#### **Funcionalidades Implementadas**

1. **PrevisualizaciÃ³n de Excel (`previsualizar_excel`)**
   - Lectura y validaciÃ³n de archivos Excel multi-hoja
   - Procesamiento de registros con validaciones
   - DetecciÃ³n de errores y advertencias
   - VisualizaciÃ³n en tablas HTML
   - Almacenamiento temporal de errores en sesiÃ³n

2. **Descarga de Errores (`descargar_errores_excel`)**
   - ExportaciÃ³n de errores a formato Excel
   - GeneraciÃ³n de archivo descargable con errores detectados

3. **RevisiÃ³n de Datos (`revisar_excel`)**
   - ValidaciÃ³n detallada de registros
   - DetecciÃ³n de duplicados por DNI
   - Manejo de errores y advertencias por hoja/fila
   - ValidaciÃ³n de registros individuales

4. **Guardado de Correcciones (`guardar_correcciones`)**
   - Procesamiento de datos corregidos
   - ValidaciÃ³n final antes del guardado
   - Control de duplicados
   - Manejo de errores y advertencias

#### **Estado Actual**
âœ… **Implementado:**
- Sistema completo de validaciÃ³n
- Procesamiento de mÃºltiples hojas
- DetecciÃ³n de duplicados
- Manejo de errores y advertencias
- ExportaciÃ³n de errores

ğŸ“Œ **Pendiente:**
- Implementar guardado final en base de datos
- Mejorar interfaz de usuario para correcciones
- Agregar validaciones especÃ­ficas por tipo de dato
- Implementar sistema de logs para seguimiento

---

### **Estado Actual del Proyecto**

#### MÃ³dulos Implementados:
1. **Sistema de ImportaciÃ³n de Excel**
   - Carga y validaciÃ³n de archivos Excel
   - PrevisualizaciÃ³n de datos
   - Sistema de correcciÃ³n y mapeo de datos
   - Reglas de correcciÃ³n automÃ¡ticas
   - EstadÃ­sticas interactivas con Chart.js
   - Notificaciones y manejo de errores

2. **GestiÃ³n de Usuarios**
   - Roles: Paciente, MÃ©dico, Administrativo
   - Permisos y autenticaciÃ³n
   - GestiÃ³n administrativa para mÃ©dicos y centros

3. **GestiÃ³n de Pacientes**
   - Datos personales y mÃ©dicos
   - Historial clÃ­nico
   - VinculaciÃ³n con obras sociales

4. **Centros MÃ©dicos**
   - GestiÃ³n de quirÃ³fanos y consultorios
   - Equipamiento mÃ©dico
   - Convenios con obras sociales

#### Mejoras Recientes:
1. **EstadÃ­sticas Interactivas**
   - GrÃ¡ficos dinÃ¡micos con Chart.js
   - Filtros por perÃ­odo y tipo de datos
   - Indicadores de carga y animaciones
   - Sistema de notificaciones toast
   - Manejo de errores con reintentos automÃ¡ticos

2. **Sistema de Notificaciones**
   - Notificaciones toast para feedback
   - Diferentes tipos: success, error, warning, info
   - Animaciones y transiciones suaves
   - Sistema de cola para notificaciones

#### Pendiente por Implementar:
1. **Mejoras en EstadÃ­sticas**
   - ExportaciÃ³n de datos filtrados
   - MÃ¡s tipos de visualizaciones
   - CachÃ© para optimizar rendimiento

2. **Sistema de Notificaciones**
   - Notificaciones en tiempo real
   - Historial de notificaciones
   - Preferencias de notificaciÃ³n por usuario

3. **Tests Unitarios**
   - Cobertura de pruebas para mÃ³dulos crÃ­ticos
   - Tests de integraciÃ³n
   - Tests de interfaz de usuario

4. **Optimizaciones**
   - Mejoras de rendimiento en consultas
   - ImplementaciÃ³n de cachÃ©
   - OptimizaciÃ³n de carga de assets

### **PrÃ³ximos Pasos**
1. Implementar tests unitarios
2. Mejorar el sistema de notificaciones
3. Optimizar el rendimiento general
4. Documentar API y endpoints

